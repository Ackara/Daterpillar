<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.IO;
using System.Linq;

namespace <#= Host.ResolveAssemblyReference("$(RootNamespace)") #>
{
	internal static partial class <#= Path.GetFileNameWithoutExtension(Host.TemplateFile) #>
	{
		public const string FOLDER_NAME = "<#= FolderName #>";

		public static string DirectoryName => Path.Combine(AppDomain.CurrentDomain.BaseDirectory, FOLDER_NAME);

		public static string CreateDirectory(string filePath)
		{
			string dir = Path.GetDirectoryName(filePath);
			if (Directory.Exists(dir) == false) Directory.CreateDirectory(dir);

			return dir;
		}

		public static FileInfo GetFile(string fileName)
        {
            fileName = Path.GetFileName(fileName);
            string searchPattern = $"*{Path.GetExtension(fileName)}";

            string appDirectory = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, FOLDER_NAME);
            return new DirectoryInfo(appDirectory).EnumerateFiles(searchPattern, SearchOption.AllDirectories)
                .First(x => x.Name.Equals(fileName, StringComparison.CurrentCultureIgnoreCase));
        }

<#
	PushIndent("\t\t");
	foreach ((string relativeDir, string memberName, FileInfo file) in GetFileList())
	{
		string methodName = string.Concat(memberName, file.Extension.TrimStart('.').ToUpper());
		WriteLine($"public static FileInfo Get{methodName}() => GetFile(@\"{Path.Combine(relativeDir, file.Name)}\");");
	}
	PopIndent();
#>

		public class File
		{
<#
	PushIndent("\t\t\t");
	foreach ((string relativeDir, string memberName, FileInfo file) in GetFileList())
	{
		WriteLine($"public const string {memberName}{file.Extension.TrimStart('.').ToUpper()} = @\"{Path.Combine(relativeDir, file.Name)}\";");
	}
	PopIndent();
#>
		}
	}	
}
<#+
string FolderName = "test-data";

IEnumerable<(string, string, FileInfo)> GetFileList()
{
	var directory = Path.Combine(Host.ResolveAssemblyReference("$(ProjectDir)"), FolderName);

	if (Directory.Exists(directory))
	{
		foreach (var file in new DirectoryInfo(directory).GetFiles("*", SearchOption.AllDirectories))
		{
			string relativeDir = file.DirectoryName.Replace(directory, "").Trim('\\', ' ', '/');
			string member = Path.GetFileNameWithoutExtension(file.Name).Replace('-', ' ');
			member = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(member).Replace(" ", "");

			yield return (relativeDir, member, file);
		}
	}
	else
	{
		Warning($"Could not find folder at '{directory}'.");
	}
}
#>
