<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  
	string className = Path.GetFileNameWithoutExtension(Host.TemplateFile); 
	string dictionaryName = "TypeMap"; 
#>
using System.Collections.Generic;

namespace Ackara.Daterpillar.TypeResolvers
{
	/// <summary>
	/// Defines a method that maps a <see cref="http://static.acklann.com/schema/v2/daterpillar.xsd"/> TypeName to another language's type name.
	/// </summary>
	/// <seealso cref="ITypeResolver" />
	public abstract class <#= className #> : ITypeResolver
	{
		#region Keys

<#
	PushIndent("\t\t");
	foreach (var typeName in GetXsdTypeNames())
	{
		 WriteLine($"public const string {typeName.ToUpper()} = \"{typeName}\";");
	}
	ClearIndent();
#>

		#endregion Keys

		/// <summary>
		/// Initializes a new instance of the <see cref="<#= className #>"/> class.
		/// </summary>
		public <#= className #>()
		{
			<#= dictionaryName #> = new Dictionary<string, string>
			{
<#
	PushIndent("\t\t\t\t");
	foreach (var value in GetXsdTypeNames())
	{
		WriteLine($"{{ \"{value.ToLower()}\", \"{value.ToLower()}\" }},");
	}
	
	ClearIndent();
#>
			};
		}

		/// <summary>
		/// Maps the specified <see cref="DataType"/>.
		/// </summary>
		/// <param name="dataType">Type of the data.</param>
		/// <returns>The type name.</returns>
		public abstract string GetTypeName(DataType dataType);

		/// <summary>
		/// Gets or sets the type-to-type map.
		/// </summary>
		protected IDictionary<string, string> <#= dictionaryName #> { get; set; }
	}
}
<#+ 

public IEnumerable<string> GetXsdTypeNames()
{
	string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "src", "daterpillar.xsd");
	
	var xsdDoc = XDocument.Load(schemaPath);
	string xmlns = "http://www.w3.org/2001/XMLSchema";
	XElement typeNameElement = (
		from x in xsdDoc.Descendants(XName.Get("simpleType", xmlns))
		where x.Attribute("name") != null && x.Attribute("name").Value == "TypeName"
		select x).FirstOrDefault();

	var enumValues = from x in typeNameElement.Descendants(XName.Get("enumeration", xmlns))
					 select x.Attribute("value").Value;

	return enumValues;
}

#>