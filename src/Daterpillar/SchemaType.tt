<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Acklann.Daterpillar
{
	/// <summary>
	/// Represents a schema data type.
	/// </summary>
	public enum SchemaType
	{
		/// <summary>none</summary>
		NONE,
<#
	PushIndent("\t\t");
	foreach(var item in GetXsdTypeNames())
	{
		WriteLine($"/// <summary>{item}</summary>");
		WriteLine($"{item.ToUpper()},");
	}
	PopIndent();
#>
	}
}
<#+ 

public IEnumerable<string> GetXsdTypeNames()
{
	string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "src", "daterpillar.xsd");
	
	var xsdDoc = XDocument.Load(schemaPath);
	string xmlns = "http://www.w3.org/2001/XMLSchema";
	XElement typeNameElement = (
		from x in xsdDoc.Descendants(XName.Get("simpleType", xmlns))
		where x.Attribute("name") != null && x.Attribute("name").Value == "TypeName"
		select x).FirstOrDefault();

	var enumValues = from x in typeNameElement.Descendants(XName.Get("enumeration", xmlns))
					 select x.Attribute("value").Value;

	return enumValues;
}

#>