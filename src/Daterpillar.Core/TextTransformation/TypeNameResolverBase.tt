<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  
	string className = Path.GetFileNameWithoutExtension(Host.TemplateFile); 
	string dictionaryName = "TypeNames"; 
#>
using System.Collections.Generic;

namespace Gigobyte.Daterpillar.TextTransformation
{
	public abstract partial class <#= className #> : ITypeNameResolver
	{
		#region Keys

<#
	PushIndent("\t\t");
	foreach (var typeName in GetXsdTypeNames())
	{
		 WriteLine(string.Format("public const string {0} = \"{1}\";", typeName.ToUpper(), typeName.ToLower()));
	}
	ClearIndent();
#>

		#endregion Keys

		/// <summary>
		/// Initializes a new instance of the <see cref="TypeNameResolverBase"/> class.
		/// </summary>
		public <#= className #>()
		{
			<#= dictionaryName #> = new Dictionary<string, string>();
		
<#
	PushIndent("\t\t\t");
	foreach (var value in GetXsdTypeNames())
	{
		WriteLine(string.Format("{0}.Add(\"{1}\", \"{1}\");",dictionaryName, value.ToLower()));
	}
	
	ClearIndent();
#>
		}

		/// <summary>
		/// 
		/// </summary>
		public abstract string GetName(DataType dataType);

		/// <summary>
		/// 
		/// </summary>
		protected IDictionary<string, string> <#= dictionaryName #> { get; set; }
	}
}
<#+ 
	public IEnumerable<string> GetXsdTypeNames()
	{
		string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "daterpillar.xsd");
		
		var xsdDoc = XDocument.Load(schemaPath);	
		string xmlns = "http://www.w3.org/2001/XMLSchema";
		XElement typeNameElement = (from x in xsdDoc.Descendants(XName.Get("simpleType", xmlns))
								where x.Attribute("name") != null && x.Attribute("name").Value == "TypeName"
								select x).FirstOrDefault();
	
		var enumValues = from x in typeNameElement.Descendants(XName.Get("enumeration", xmlns))
						 select x.Attribute("value").Value;

		return enumValues;
	}
#>