<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="$(SolutionDir)\Daterpillar.Core\bin\Debug\Gigobyte.Daterpillar.Core.dll" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Gigobyte.Daterpillar" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gigobyte.Daterpillar.TextTransformation" #>
<#@ output extension=".txt" #>
using System;
using Gigobyte.Daterpillar.Data;
using System.Runtime.Serialization;

namespace GeneratedCode
{
<# 
	/* *** INSTRUCTIONS *** */
	string schemaPath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "schema.xml");
	var schema = Schema.Load(File.OpenRead(schemaPath));

	var settings = new CSharpScriptBuilderSettings()
		{
			Namespace = Schema.Xmlns,

			AppendComments = true,
			AppendSchemaInformation = true,
			AppendVirtualProperties = false
		};
	

	//ExcludeTable(schema, "TableName");
	//RenameTable(schema, "oldTable", "newTable");
	//GenerateEnumFromTable(connection, "enumName", "tableName", "nameColumn", "valueColumn");

	Generate(schema, new CSharpScriptBuilder(settings));
	
#>
}
<#+

public void Generate(Schema schema, IScriptBuilder scriptBuilder)
{
	PushIndent("\t");
	scriptBuilder.Create(schema);
	WriteLine(scriptBuilder.GetContent());
	PopIndent();
}

public void GenerateAsFile(Schema schema, IScriptBuilder scriptBuilder, string fileName)
{
	var tempFile = Path.GetTempFileName();
	scriptBuilder.Create(schema);
	File.WriteAllText(tempFile, scriptBuilder.GetContent());

	var dte = (EnvDTE.DTE)((IServiceProvider)this.Host).GetService(typeof(EnvDTE.DTE));
	var thisTemplateFile = dte.Solution.FindProjectItem(this.Host.TemplateFile);
	DeleteTextTemplateSubItem(thisTemplateFile, fileName);
	thisTemplateFile.ProjectItems.AddFromTemplate(tempFile, fileName);
}

public void ExcludeTable(Schema schema, params string[] tables)
{
	foreach(var item in tables)
	{
		int index = schema.Tables.FindIndex(x=> x.Name.Equals(item, StringComparison.CurrentCultureIgnoreCase));
		if(index >= 0) schema.Tables.RemoveAt(index);
	}
}

public void RenameTable(Schema schema, string oldName, string newName)
{
	int index = schema.Tables.FindIndex(x=> x.Name.Equals(oldName, StringComparison.CurrentCultureIgnoreCase));
	if(index >= 0) schema.Tables[index].Name = newName;
}

public void GenerateEnumFromTable(IDbConnection database, string enumName, string tableName, string nameColumn, string valueColumn)
{
	if (database.State != ConnectionState.Open) database.Open();
	using(var cmd = database.CreateCommand())
	{
		cmd.CommandText = string.Format("SELECT {1}, {2} FROM {0};", tableName, nameColumn, valueColumn);
		using(var queryResults = new DataTable())
		{
			queryResults.Load(cmd.ExecuteReader());

			PushIndent("\t");
			WriteLine("public enum {0}", enumName.ToPascalCase());
			WriteLine("{");
			foreach (DataRow row in queryResults.Rows)
			{
				string name = Convert.ToString(row[nameColumn]);
				int value = Convert.ToInt32(row[valueColumn]);
				WriteLine("\t{0} = {1};", name.ToPascalCase(), value);
			}
			WriteLine("}"); WriteLine("");
			PopIndent();
		}
	}
}

private void DeleteTextTemplateSubItem(ProjectItem template, string fileName)
{
	foreach(ProjectItem subItem in template.ProjectItems)
	{
		string subItemPath = subItem.FileNames[1];
		if(Path.GetFileName(subItemPath) == fileName)
		{
			File.Delete(subItem.FileNames[1]);
			subItem.Delete();
			break;
		}
	}
}

#>