<?xml version="1.0" encoding="utf-8"?>
<helpItems xmlns="http://msh" schema="maml">
	<!-- Edited with: SAPIEN PowerShell HelpWriter 2017 v2.1.34-->
	<!-- Generated by: SAPIEN PowerShell HelpWriter 2017 v2.1.34-->
	<!--
		 Module: 		Acklann.Daterpillar.Automation
		 Version:		4.7.13.0
	-->
	<!-- All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>Compare-Database</command:name>
			<maml:description>
				<maml:para>This cmdlet compares the structure of two [Acklann.Daterpillar.Schema] objects.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>Compare</command:verb>
			<command:noun>Database</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Compare two [Acklann.Daterpillar.Schema] objects; returned is a PSObject with two properties 'State' and 'Differences'. The 'State' property is a enum value of type [Acklann.Daterpillar.Migration.MigrationState] where as the 'Differences' property is a string listing the differences between the passed objects.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>Compare-Database</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src">
					<maml:name>Source</maml:name>
					<maml:description>
						<maml:para>The source/left schema.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Schema</command:parameterValue>
					<dev:type>
						<maml:name>Schema</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="right , dest">
					<maml:name>Target</maml:name>
					<maml:description>
						<maml:para>The target/right schema.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Schema</command:parameterValue>
					<dev:type>
						<maml:name>Schema</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src">
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>The source/left schema.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Schema</command:parameterValue>
				<dev:type>
					<maml:name>Schema</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="right , dest">
				<maml:name>Target</maml:name>
				<maml:description>
					<maml:para>The target/right schema.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Schema</command:parameterValue>
				<dev:type>
					<maml:name>Schema</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>Acklann.Daterpillar.Schema</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>PSObject</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; Compare-Database $left $right | Select-Object -ExpandProperty State</dev:code>
				<dev:remarks>
					<maml:para>This example, compares two [Acklann.Daterpillar.Schema] objects ($left and $right) then selects the returned object's State property, which is an enum of Type [Acklann.Daterpillar.Migration.MigrationState].</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>EXAMPLE 2</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; Compare-Database $left $right | Select-Object -ExpandProperty Differences;</dev:code>
				<dev:remarks>
					<maml:para>This example, compares two [Acklann.Daterpillar.Schema] objects ($left and $right) then selects the returned object's Differences property, which is a string describing the differences between the two objects.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!-- Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>ConvertTo-Schema</command:name>
			<maml:description>
				<maml:para>This cmdlet instantiates a new [Acklann.Daterpillar.Schema] object from the specified 'InputObject'.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>Schema</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Initializes a new [Acklann.Daterpillar.Schema] instance using a specified file or [System.Data.IDBConnection] object.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>ConvertTo-Schema</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="in , input , path , connection , conn">
					<maml:name>InputObject</maml:name>
					<maml:description>
						<maml:para>The file or [System.Data.IDbConnection] object.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
					<dev:type>
						<maml:name>Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="in , input , path , connection , conn">
				<maml:name>InputObject</maml:name>
				<maml:description>
					<maml:para>The file or [System.Data.IDbConnection] object.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.IO.FileInfo</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
			<command:inputType>
				<dev:type>
					<maml:name>System.Data.IDbConnection</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>Acklann.Daterpillar.Schema</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<!-- Notes-->
			<maml:title>Accepted inputs</maml:title>
			<maml:alert>
				<maml:para>This cmdlet will accept a (mysql, mssql or sqlite) [System.Data.IDbConnection] object or a path to a serialized [Acklann.Daterpillar.Schema] object. When [System.Data.IDbConnection] is passed the cmdlet will open a connection to the server and read the 'Information schema' tables to generate a [Acklann.Daterpillar.Schema] object.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; Get-Item "C:\projects\helloworld\bin\Debug\helloworld.schema.xml" | ConvertTo-Schema;</dev:code>
				<dev:remarks>
					<maml:para>This example, creates a new [Acklann.Daterpillar.Schema] object using a 'schema.xml' file.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>EXAMPLE 2</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; $schema = ConvertTo-Schema (New-Object System.Data.SqlClient.SqlConnection($connectionString));</dev:code>
				<dev:remarks>
					<maml:para>This example creates [Acklann.Daterpillar.Schema] object by passing a [System.Data.IDbConnection] object.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!-- Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>ConvertTo-Script</command:name>
			<maml:description>
				<maml:para>This cmdlet generates a script from a [Acklann.Daterpillar.Schema] object.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>ConvertTo</command:verb>
			<command:noun>Script</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Generates a (mysql, mssql, sqlite or csharp) script from a [Acklann.Daterpillar.Schema] object.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>ConvertTo-Script</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="in , input">
					<maml:name>Schema</maml:name>
					<maml:description>
						<maml:para>The [Acklann.Daterpillar.Schema] object.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
					<dev:type>
						<maml:name>Schema</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The syntax.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="builder , b">
					<maml:name>ScriptBuilder</maml:name>
					<maml:description>
						<maml:para>An optional [Acklann.Daterpillar.Scripting.IScriptBuilder] object.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">IScriptBuilder</command:parameterValue>
					<dev:type>
						<maml:name>IScriptBuilder</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="1" aliases="in , input">
				<maml:name>Schema</maml:name>
				<maml:description>
					<maml:para>The [Acklann.Daterpillar.Schema] object.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
				<dev:type>
					<maml:name>Schema</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The syntax.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="builder , b">
				<maml:name>ScriptBuilder</maml:name>
				<maml:description>
					<maml:para>An optional [Acklann.Daterpillar.Scripting.IScriptBuilder] object.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">IScriptBuilder</command:parameterValue>
				<dev:type>
					<maml:name>IScriptBuilder</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>Acklann.Daterpillar.Schema</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; "C:\project\helloworld.schema.xml" | ConvertTo-Schema | ConvertTo-Script -Syntax "MySQL" | Out-File "C:\project\helloworld.sql";</dev:code>
				<dev:remarks>
					<maml:para>This example, converts a serialized [Acklann.Daterpillar.Schema] object to a MySQL script.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<!-- Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
			<maml:navigationLink>
				<maml:linkText>ConvertTo-Schema</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>Import-SQLData</command:name>
			<maml:description>
				<maml:para>This cmdlet copies the rows from one SQL table to another.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>Import</command:verb>
			<command:noun>SQLData</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Copy the the rows from SQL table to another. This cmdlet accepts a connection string and [System.Data.IDbConnection] object. Returns a [System.Data.DataTable] of the copied data.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>Import-SQLData</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src , from , conn1 , connStr1">
					<maml:name>Source</maml:name>
					<maml:description>
						<maml:para>The connection string or [System.Data.IDbConnection] object of the source database.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:type>
						<maml:name>Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="right , dest , to , conn2 , connStr2">
					<maml:name>Destination</maml:name>
					<maml:description>
						<maml:para>The connection string or [System.Data.IDbConnection] object of the target database.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
					<dev:type>
						<maml:name>Object</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="t , tbl">
					<maml:name>Table</maml:name>
					<maml:description>
						<maml:para>The name of the table to be copied.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The connection type.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src , from , conn1 , connStr1">
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>The connection string or [System.Data.IDbConnection] object of the source database.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="right , dest , to , conn2 , connStr2">
				<maml:name>Destination</maml:name>
				<maml:description>
					<maml:para>The connection string or [System.Data.IDbConnection] object of the target database.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
				<dev:type>
					<maml:name>Object</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="t , tbl">
				<maml:name>Table</maml:name>
				<maml:description>
					<maml:para>The name of the table to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The connection type.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
			<command:inputType>
				<dev:type>
					<maml:name>System.Data.IDbConnection</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Data.DataTable</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:relatedLinks>
			<!-- Links-->
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>Invoke-SQLCommand</command:name>
			<maml:description>
				<maml:para>This cmdlet executes a SQL comamd.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>SQLCommand</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Execute a SQL command. You can pass a connection string or explictly define the connection arguments. Returns a $true if the command was sucessful.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>Invoke-SQLCommand</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The connection type.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="h , server">
					<maml:name>Host</maml:name>
					<maml:description>
						<maml:para>The server's address.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="u , usr">
					<maml:name>User</maml:name>
					<maml:description>
						<maml:para>The username.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="p , pwd">
					<maml:name>Password</maml:name>
					<maml:description>
						<maml:para>The password.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="d , name">
					<maml:name>Database</maml:name>
					<maml:description>
						<maml:para>The database name.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="6" aliases="content">
					<maml:name>Script</maml:name>
					<maml:description>
						<maml:para>The script to execute.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="conn , connStr">
					<maml:name>ConnectionString</maml:name>
					<maml:description>
						<maml:para>The connection string.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="h , server">
				<maml:name>Host</maml:name>
				<maml:description>
					<maml:para>The server's address.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="u , usr">
				<maml:name>User</maml:name>
				<maml:description>
					<maml:para>The username.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="p , pwd">
				<maml:name>Password</maml:name>
				<maml:description>
					<maml:para>The password.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="d , name">
				<maml:name>Database</maml:name>
				<maml:description>
					<maml:para>The database name.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The connection type.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="conn , connStr">
				<maml:name>ConnectionString</maml:name>
				<maml:description>
					<maml:para>The connection string.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="6" aliases="content">
				<maml:name>Script</maml:name>
				<maml:description>
					<maml:para>The script to execute.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; 'create database [foo]' | Invoke-SQLCommand -type 'mysql' -h 'localhost' -usr 'john' -pwd 'pa55w0rd' -db 'sakila';</dev:code>
				<dev:remarks>
					<maml:para>This example executes a SQL command by explicitly defining the connection parameters.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>EXAMPLE 2</maml:title>
				<maml:introduction>
					<maml:para></maml:para>
				</maml:introduction>
				<dev:code>C:\PS&gt; 'create table [foo]' | Invoke-SQLCommand -type 'mysql' -conn $connectionString;</dev:code>
				<dev:remarks>
					<maml:para>This example executes a SQL command by passing a connection string.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>http://www.sapien.com</maml:uri>
			</maml:navigationLink>
			<!-- Links-->
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>New-Database</command:name>
			<maml:description>
				<maml:para>This cmdlet creates a new database.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>Database</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Create a new database on the specified server. Returns a $true if the database was created $false if otherwise.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>New-Database</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="h , server">
					<maml:name>Host</maml:name>
					<maml:description>
						<maml:para>The server's address.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="u , usr">
					<maml:name>User</maml:name>
					<maml:description>
						<maml:para>The username.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="p , pwd">
					<maml:name>Password</maml:name>
					<maml:description>
						<maml:para>The user password.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="d , name">
					<maml:name>Database</maml:name>
					<maml:description>
						<maml:para>The name of the target database.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The connection type.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="conn , connStr">
					<maml:name>ConnectionString</maml:name>
					<maml:description>
						<maml:para>The connection string.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="r , del , dlt , delete">
					<maml:name>DeleteIfExist</maml:name>
					<maml:description>
						<maml:para>Determine whether the database should be deleted before its created.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
					<dev:type>
						<maml:name>SwitchParameter</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="0" aliases="h , server">
				<maml:name>Host</maml:name>
				<maml:description>
					<maml:para>The server's address.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="u , usr">
				<maml:name>User</maml:name>
				<maml:description>
					<maml:para>The username.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="p , pwd">
				<maml:name>Password</maml:name>
				<maml:description>
					<maml:para>The user password.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="d , name">
				<maml:name>Database</maml:name>
				<maml:description>
					<maml:para>The name of the target database.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The connection type.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="conn , connStr">
				<maml:name>ConnectionString</maml:name>
				<maml:description>
					<maml:para>The connection string.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named" aliases="r , del , dlt , delete">
				<maml:name>DeleteIfExist</maml:name>
				<maml:description>
					<maml:para>Determine whether the database should be deleted before its created.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">SwitchParameter</command:parameterValue>
				<dev:type>
					<maml:name>SwitchParameter</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para />
				</maml:introduction>
				<dev:code>C:\PS&gt; New-Database -type "mysql" -h "localhost" -usr "john" -pwd "pa55w0rd" -d "foo" -DeleteIfExist;</dev:code>
				<dev:remarks>
					<maml:para>This example creates a new database called 'foo' and deletes if it already exist before re-creating it.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>EXAMPLE 2</maml:title>
				<maml:introduction>
					<maml:para />
				</maml:introduction>
				<dev:code>C:\PS&gt; $connectionString | New-Database -name "foo";</dev:code>
				<dev:remarks>
					<maml:para>This example creates a new database called 'foo';</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
			<!-- Links-->
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>New-MigrationScript</command:name>
			<maml:description>
				<maml:para>This cmdlet generates a migration script.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>New</command:verb>
			<command:noun>MigrationScript</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Generate a script that migrates one schema to the next. Returns a PSObject with three properties 'State', 'Modifications' and 'Script'.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>New-MigrationScript</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src , from">
					<maml:name>Source</maml:name>
					<maml:description>
						<maml:para>The left schema.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
					<dev:type>
						<maml:name>Schema</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2" aliases="right , dest , to">
					<maml:name>Target</maml:name>
					<maml:description>
						<maml:para>The right schema.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
					<dev:type>
						<maml:name>Schema</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The syntax.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="builder , b">
					<maml:name>ScriptBuilder</maml:name>
					<maml:description>
						<maml:para>An optional [Acklann.Daterpillar.Scripting.IScriptBuilder] object.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">IScriptBuilder</command:parameterValue>
					<dev:type>
						<maml:name>IScriptBuilder</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="left , src , from">
				<maml:name>Source</maml:name>
				<maml:description>
					<maml:para>The left schema.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
				<dev:type>
					<maml:name>Schema</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="2" aliases="right , dest , to">
				<maml:name>Target</maml:name>
				<maml:description>
					<maml:para>The right schema.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">Schema</command:parameterValue>
				<dev:type>
					<maml:name>Schema</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The syntax.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="builder , b">
				<maml:name>ScriptBuilder</maml:name>
				<maml:description>
					<maml:para>An optional [Acklann.Daterpillar.Scripting.IScriptBuilder] object.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">IScriptBuilder</command:parameterValue>
				<dev:type>
					<maml:name>IScriptBuilder</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>Acklann.Daterpillar.Schema</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
			<command:returnValue>
				<dev:type>
					<maml:name>Acklann.Daterpillar.Migration.MigrationState</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para />
				</maml:description>
			</command:returnValue>
			<command:returnValue>
				<dev:type>
					<maml:name>PSObject</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para />
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para />
				</maml:introduction>
				<dev:code>C:\PS&gt; New-MigrationScript $left $right -Syntax "mysql";</dev:code>
				<dev:remarks>
					<maml:para>This example generates a migration script from the left and right schemas.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
			<!-- Links-->
			<maml:navigationLink>
				<maml:linkText>ConvertTo-Schema</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
		</maml:relatedLinks>
	</command:command>
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--TAG: HASCOMMONPARAMETERS-->
		<!-- Command-->
		<command:details>
			<command:name>Remove-Database</command:name>
			<maml:description>
				<maml:para>This cmdlet delete a database from a server.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para></maml:para>
			</maml:copyright>
			<command:verb>Remove</command:verb>
			<command:noun>Database</command:noun>
			<dev:version />
		</command:details>
		<maml:description>
			<maml:para>Delete a database from a specified server. Returns $true if the database was found $false if otherwise.</maml:para>
		</maml:description>
		<command:syntax>
			<!-- Parameter Sets-->
			<command:syntaxItem parametersetname="__AllParameterSets">
				<!--NAME: __AllParameterSets-->
				<maml:name>Remove-Database</maml:name>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="h , server">
					<maml:name>Host</maml:name>
					<maml:description>
						<maml:para>The server's address.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="u , usr">
					<maml:name>User</maml:name>
					<maml:description>
						<maml:para>The username.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="p , pwd">
					<maml:name>Password</maml:name>
					<maml:description>
						<maml:para>The user password.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="d , name">
					<maml:name>Database</maml:name>
					<maml:description>
						<maml:para>The name of the target database.s</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="type , syn , ext , extension">
					<maml:name>Syntax</maml:name>
					<maml:description>
						<maml:para>The connection type.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
				<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="conn , connStr">
					<maml:name>ConnectionString</maml:name>
					<maml:description>
						<maml:para>The connection string.</maml:para>
					</maml:description>
					<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
					<dev:type>
						<maml:name>String</maml:name>
						<maml:uri />
					</dev:type>
					<dev:defaultValue></dev:defaultValue>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!-- All Parameters-->
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1" aliases="h , server">
				<maml:name>Host</maml:name>
				<maml:description>
					<maml:para>The server's address.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2" aliases="u , usr">
				<maml:name>User</maml:name>
				<maml:description>
					<maml:para>The username.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3" aliases="p , pwd">
				<maml:name>Password</maml:name>
				<maml:description>
					<maml:para>The user password.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4" aliases="d , name">
				<maml:name>Database</maml:name>
				<maml:description>
					<maml:para>The name of the target database.s</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="5" aliases="type , syn , ext , extension">
				<maml:name>Syntax</maml:name>
				<maml:description>
					<maml:para>The connection type.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="True (ByValue)" position="named" aliases="conn , connStr">
				<maml:name>ConnectionString</maml:name>
				<maml:description>
					<maml:para>The connection string.</maml:para>
				</maml:description>
				<command:parameterValue required="false" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri />
				</dev:type>
				<dev:defaultValue></dev:defaultValue>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!-- Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.String</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!-- Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Boolean</maml:name>
					<maml:uri></maml:uri>
				</dev:type>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<command:examples>
			<!-- Examples-->
			<command:example>
				<maml:title>EXAMPLE 1</maml:title>
				<maml:introduction>
					<maml:para />
				</maml:introduction>
				<dev:code>C:\PS&gt; Remove-Database -type "mssql" -h "localhost" -usr "john" -pwd "pa5sword" -name "foo";</dev:code>
				<dev:remarks>
					<maml:para>This example deletes a database with the name foo.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>EXAMPLE 2</maml:title>
				<maml:introduction>
					<maml:para />
				</maml:introduction>
				<dev:code>C:\PS&gt; $connectionString | Remove-Database -type "mssql" -name "foo";</dev:code>
				<dev:remarks>
					<maml:para>This example deletes a database with the name foo.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
		<maml:relatedLinks>
			<maml:navigationLink>
				<maml:linkText>Online Version:</maml:linkText>
				<maml:uri>https://github.com/Ackara/Daterpillar</maml:uri>
			</maml:navigationLink>
			<!-- Links-->
		</maml:relatedLinks>
	</command:command>
	<!-- Generated by: SAPIEN PowerShell HelpWriter 2017 v2.1.34-->
</helpItems>