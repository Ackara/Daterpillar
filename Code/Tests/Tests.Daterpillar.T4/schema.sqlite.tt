<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="$(TargetDir)\Gigobyte.Daterpillar.Core.dll" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Gigobyte.Daterpillar.Transformation" #>
<#@ import namespace="Gigobyte.Daterpillar.Transformation.Template" #>
<#@ output extension=".sql" #>
<# 
	/* *** INSTRUCTIONS *** */
	/// To run this template, the location of the "Gigobyte.Daterpillar.Core.dll" must be provided.
	/// If you add the .dll to project as a reference then perform a build, the directive above "@ assembly name="$(TargetDir)\Gigobyte.Daterpillar.Core.dll" #"
	/// will locate the .dll.
#>
/*
 * SCHEMA:		example inc.
 * VERSION:		1.0.0.0
 * AUTHOR:		john@example.com
 * GENERATED:	<#= DateTime.Now.ToString("MMMM dd, yyyy") #>
*/

<# 
	/* *** INSTRUCTIONS *** */
	/// Provide the path to the schema document you wish to transform.
	/// Below are some examples of how a dynamic path can be constructed.

	/// string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(TargetDir)"), "schema.xddl.xml");
	/// string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "schema.xddl.xml");
	string schemaPath = Path.Combine(Host.ResolveAssemblyReference("$(ProjectDir)"), "schema.xddl.xml");
	var schema = Schema.Load(File.OpenRead(schemaPath));
	
	/// You can change the output of the SQLite schema using the settings object.
	/// You can also write your own template by implementing <see cref="Gigobyte.Daterpillar.Transformation.Template.ITemplate" />
	var settings = new SQLiteTemplateSettings()
	{
		DropTable = true,
		CommentsEnabled = true
	};

	var template = new SQLiteTemplate(settings);
	string sqlite = template.Transform(schema);
	WriteLine(sqlite);
#>